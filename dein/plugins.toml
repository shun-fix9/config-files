[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
hook_add = '''
nnoremap <silent> <SPACE>p :Denite file/rec<CR>
nnoremap <silent> <SPACE>l :Denite file/rec/git<CR>
nnoremap <silent> <SPACE>b :Denite buffer<CR>
nnoremap <silent> <SPACE>z :Denite file_mru<CR>

call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])

autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> q denite#do_map('quit')
  nnoremap <silent><buffer><expr> a denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> u denite#do_map('move_up_path')
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <CR> <Plug>(denite_filter_quit)<CR>
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-fugitive']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline']
hook_add = '''
au VimEnter * nested AirlineTheme vice
'''

[[plugins]]
repo = 'marcopaganini/mojave-vim-theme'
hook_add = '''
set termguicolors
au VimEnter * nested colorscheme mojave
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = "release"
hook_add = '''
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Remap keys for gotos
nmap <silent> ,d <Plug>(coc-definition)
nmap <silent> ,r <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nmap <silent> <space>F <Plug>(coc-format)
nmap <space>R <Plug>(coc-rename)

nnoremap <silent> <space>n :<C-u>CocList diagnostics<cr>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   'elm': ['elm-format'],
\}
let g:ale_elm_format_executable = 'elm-format'
let g:ale_elm_format_options = '--yes --elm-version=0.19'
'''

